Name,Nestedname,Descriptor,Type,Notes
cc.alcina.framework.common.client.dom.DomDocument,DomDocument,staticFields: [perDocumentSupplier :: DomDocument.PerDocumentSupplier],,
cc.alcina.framework.common.client.dom.DomNode,DomNode,staticFields: [queryLookup :: Map],,
cc.alcina.framework.common.client.domain.Domain,Domain,"staticFields: [handler :: Domain.DomainHandler, logger :: Logger]",,
cc.alcina.framework.common.client.domain.DomainCollections,DomainCollections,registrySingleton: true,,
cc.alcina.framework.common.client.logic.ExtensibleEnum,ExtensibleEnum,"staticFields: [superLookup :: Multimap, valueLookup :: UnsortedMultikeyMap, tagLookup :: UnsortedMultikeyMap]",,
cc.alcina.framework.common.client.logic.domain.Entity,Entity,staticFields: [classResolver :: Entity.EntityClassResolver],,
cc.alcina.framework.common.client.logic.domaintransform.CollectionModification$CollectionModificationSupport,CollectionModification.CollectionModificationSupport,"staticFields: [queuedEvents :: List, queueDepth :: int]",,
cc.alcina.framework.common.client.logic.domaintransform.TransformManager,TransformManager,"staticFields: [eventIdCounter :: long, localIdGenerator :: SequentialIdGenerator, factoryInstance :: TransformManager, createdLocalAndPromoted :: Map]",,
cc.alcina.framework.common.client.logic.domaintransform.lookup.LiSet,LiSet,staticFields: [degenerateCreator :: LiSet.DegenerateCreator],,
cc.alcina.framework.common.client.logic.permissions.PermissionsManager,PermissionsManager,"staticFields: [SYSTEM_GROUP_NAME :: String, SYSTEM_USER_NAME :: String, ANONYMOUS_USER_NAME :: String, ANONYMOUS_GROUP_NAME :: String, ADMINISTRATORS_GROUP_NAME :: String, INITIAL_ADMINISTRATOR_USER_NAME :: String, INITIAL_ADMINISTRATOR_PASSWORD :: String, DEVELOPERS_GROUP_NAME :: String, administratorGroupName :: String, developerGroupName :: String, anonymousUserName :: String, factoryInstance :: PermissionsManager, permissionsExtension :: PermissionsManager.PermissionsExtension, enabled :: boolean, stackDebug :: StackDebug, topicClientInstance :: Topic, topicLoginState :: Topic, topicOnlineState :: Topic]",,
cc.alcina.framework.common.client.logic.reflection.DefaultAnnotationResolver,DefaultAnnotationResolver,registrySingleton: true,,
cc.alcina.framework.common.client.logic.reflection.registry.EnvironmentRegistry,EnvironmentRegistry,"staticFields: [delegateProvider :: Registry.RegistryProvider, classEnvironmentSingleton :: Map]",,
cc.alcina.framework.common.client.logic.reflection.registry.Registry,Registry,"staticFields: [provider :: Registry.RegistryProvider, delegateCreator :: CollectionCreators.DelegateMapCreator]",,
cc.alcina.framework.common.client.process.ProcessObservers,ProcessObservers,"staticFields: [enabled :: boolean, instance :: ProcessObservers]",,
cc.alcina.framework.common.client.reflection.Reflections,Reflections,staticFields: [theInstance :: Reflections],,
cc.alcina.framework.common.client.reflection.impl.ClassReflectorProvider,ClassReflectorProvider,staticFields: [impl :: ClassReflectorProvider.Impl],,
cc.alcina.framework.common.client.reflection.impl.ForName,ForName,staticFields: [impl :: ForName.Impl],,
cc.alcina.framework.common.client.serializer.FlatTreeSerializer,FlatTreeSerializer,"staticFields: [NULL_MARKER :: String, NULL_MARKER_ESCAPED :: String, deSerializationClassAliasProperty :: Map, deSerializationPropertyAliasClass :: Map, unknownPropertyWarningCount :: int]",,
cc.alcina.framework.common.client.serializer.ReflectiveSerializer,ReflectiveSerializer,staticFields: [typeSerializers :: Map],,
cc.alcina.framework.common.client.serializer.ReflectiveSerializer$JsonSerialNode,ReflectiveSerializer.JsonSerialNode,staticFields: [valueSerializers :: Map],,
cc.alcina.framework.common.client.serializer.SerializationSupport,SerializationSupport,"staticFields: [solePossibleImplementation :: Map, deserializationInstance :: SerializationSupport]",,
cc.alcina.framework.common.client.traversal.DocumentSelection$DocumentToken,DocumentSelection.DocumentToken,staticFields: [TYPE :: DocumentSelection.DocumentToken],,
cc.alcina.framework.common.client.traversal.SelectionTraversal,SelectionTraversal,"staticFields: [topicTraversalComplete :: Topic, counter :: IdCounter]",,
cc.alcina.framework.common.client.traversal.layer.BranchingParser,BranchingParser,staticFields: [debugLoggingEnabled :: boolean],,
cc.alcina.framework.common.client.traversal.layer.LookaheadMatcher,LookaheadMatcher,staticFields: [topicInvalidateAll :: Topic],,
cc.alcina.framework.common.client.traversal.layer.Measure,Measure,staticFields: [counter :: IdCounter],,
cc.alcina.framework.common.client.util.Al,Al,staticFields: [context :: Al.Context],,
cc.alcina.framework.common.client.util.Ax,Ax,"staticFields: [test :: boolean, appStartup :: long]",,
cc.alcina.framework.common.client.util.CollectionCreators$Bootstrap,CollectionCreators.Bootstrap,"staticFields: [concurrentClassMapCreator :: CollectionCreators.ConcurrentMapCreator, hashMapCreator :: CollectionCreators.HashMapCreator, linkedMapCreator :: CollectionCreators.LinkedMapCreator, concurrentStringMapCreator :: CollectionCreators.ConcurrentMapCreator]",,
cc.alcina.framework.common.client.util.CollectionCreators$ConcurrentMapCreator,CollectionCreators.ConcurrentMapCreator,registrySingleton: true,,
cc.alcina.framework.common.client.util.CollectionCreators$HashMapCreator,CollectionCreators.HashMapCreator,registrySingleton: true,,
cc.alcina.framework.common.client.util.CollectionCreators$HashSetCreator,CollectionCreators.HashSetCreator,registrySingleton: true,,
cc.alcina.framework.common.client.util.CollectionCreators$LinkedMapCreator,CollectionCreators.LinkedMapCreator,registrySingleton: true,,
cc.alcina.framework.common.client.util.CollectionCreators$UnsortedMapCreator,CollectionCreators.UnsortedMapCreator,registrySingleton: true,,
cc.alcina.framework.common.client.util.CollectionCreators$WeakMapCreator,CollectionCreators.WeakMapCreator,registrySingleton: true,,
cc.alcina.framework.common.client.util.CommonUtils,CommonUtils,"staticFields: [setSupplier :: Supplier, enumValueLookup :: UnsortedMultikeyMap, standardLowercaseEnglish :: Set, logger :: Logger, dateAdjustment :: CommonUtils.DateAdjustment]",,
cc.alcina.framework.common.client.util.LooseContext,LooseContext,staticFields: [factoryInstance :: LooseContext],,
cc.alcina.framework.common.client.context.LooseContextInstance,LooseContextInstance,staticFields: [stackDebug :: StackDebug],,
cc.alcina.framework.common.client.util.NestedName,NestedName,registrySingleton: true - staticFields: [instance :: NestedName],,
cc.alcina.framework.entity.Configuration,Configuration,staticFields: [useStackTraceCallingClass :: boolean],,
cc.alcina.framework.entity.DomEnvironmentJvmImpl,DomEnvironmentJvmImpl,registrySingleton: true,,
cc.alcina.framework.entity.MetricLogging,MetricLogging,staticFields: [threadLocalInstance :: ThreadLocal],,
cc.alcina.framework.entity.SEUtilities,SEUtilities,"staticFields: [idCounter :: int, yearRangePattern :: Pattern, propertyDescriptorLookup :: Map, propertyDescriptorSortedByNameLookup :: Map, propertyDescriptorSortedByFieldLookup :: Map, allMethodsPerClass :: Map, allFieldsPerClass :: Map, sq_1 :: Pattern, sq_2 :: Pattern, sq_3 :: Pattern, sq_4 :: Pattern, sq_5 :: Pattern, sq_6 :: Pattern]",,
cc.alcina.framework.entity.SEUtilities$NestedNameProviderJvm,SEUtilities.NestedNameProviderJvm,registrySingleton: true,,
cc.alcina.framework.entity.XmlUtils,XmlUtils,"staticFields: [useJAXP :: boolean, noTransformerCaching :: boolean, db :: DocumentBuilder, xPointerConverter :: XmlUtils.XPointerConverter, selfClosingTags :: Set, ignoreBlockChildForHasNbText :: List, transformersPool :: CachingMap]",,
cc.alcina.framework.entity.gwt.headless.DOMImplHeadless,DOMImplHeadless,registrySingleton: true,,
cc.alcina.framework.entity.gwt.headless.SchedulerFrame,SchedulerFrame,staticFields: [contextProvider :: ContextProvider],,
cc.alcina.framework.entity.gwt.headless.SchedulerFrame$Task,SchedulerFrame.Task,staticFields: [counter :: IdCounter],,
cc.alcina.framework.entity.gwt.reflection.impl.typemodel.TypeOracle,TypeOracle,staticFields: [customFieldOrder :: TypeOracle.CustomFieldOrder],,
cc.alcina.framework.entity.impl.PerDocumentSupplierCoreDocument,PerDocumentSupplierCoreDocument,registrySingleton: true,,
cc.alcina.framework.entity.logic.AlcinaWebappConfig,AlcinaWebappConfig,registrySingleton: true,,
cc.alcina.framework.entity.logic.EntityLayerLogging,EntityLayerLogging,"staticFields: [logger :: Logger, loggerRefs :: ConcurrentHashMap]",,
cc.alcina.framework.entity.logic.EntityLayerUtils,EntityLayerUtils,"staticFields: [botExtraUa :: Pattern, botUa :: Pattern]",,
cc.alcina.framework.entity.logic.permissions.ThreadedPermissionsManager,ThreadedPermissionsManager,staticFields: [threadLocalInstance :: ThreadLocal],,
cc.alcina.framework.entity.logic.permissions.ThreadedPmClientInstanceResolver,ThreadedPmClientInstanceResolver,registrySingleton: true - staticFields: [instance :: ThreadedPmClientInstanceResolver],,
cc.alcina.framework.entity.persistence.AppPersistenceBase,AppPersistenceBase,staticFields: [testServer :: boolean],,
cc.alcina.framework.entity.persistence.mvcc.Transaction,Transaction,"staticFields: [retainStartEndTraces :: boolean, threadLocalSupplier :: ThreadLocal, logger :: Logger, perThreadTransaction :: Map]",,
cc.alcina.framework.entity.persistence.mvcc.Transactions,Transactions,"staticFields: [instance :: Transactions, copyConstructors :: ConcurrentHashMap]",,
cc.alcina.framework.entity.persistence.transform.TransformCommit,TransformCommit,registrySingleton: true - staticFields: [logger :: Logger],,
cc.alcina.framework.entity.projection.GraphProjection,GraphProjection,"staticFields: [replaceTimestampsWithDates :: boolean, genericTypeLookup :: Map, classSimpleName :: CachingConcurrentMap, genericEntityTypeLookup :: Map, perClassDeclaredFields :: Map, propertyPermissionLookup :: Map, constructorMethodsLookup :: Map, constructorLookup :: Map, fieldwiseEqualityProjection :: GraphProjection]",,
cc.alcina.framework.entity.registry.CachingScanner,CachingScanner,staticFields: [topicSerializationComplete :: Topic],,
cc.alcina.framework.entity.registry.ClassMetadata,ClassMetadata,staticFields: [USE_MD5_CHANGE_CHECK :: boolean],,
cc.alcina.framework.entity.stat.DevStats,DevStats,staticFields: [topicEmitStat :: Topic],,
cc.alcina.framework.entity.transform.ThreadLocalSequentialIdGenerator,ThreadLocalSequentialIdGenerator,staticFields: [threadCounters :: ThreadLocal],,
cc.alcina.framework.entity.transform.ThreadlocalTransformManager,ThreadlocalTransformManager,"staticFields: [threadLocalInstance :: ThreadLocal, threadLocalListeners :: List, tlIdGenerator :: ThreadLocalSequentialIdGenerator, logger :: Logger, setIgnoreTrace :: Map, removeListenerExceptionCounter :: AtomicInteger, ignoreAllTransformPermissions :: boolean, permitEviction :: Predicate]",,
cc.alcina.framework.entity.util.AlcinaBeanSerializerS,AlcinaBeanSerializerS,staticFields: [useContextClassloader :: boolean],,
cc.alcina.framework.entity.util.BiPrintStream,BiPrintStream,staticFields: [debugMarker :: String],,
cc.alcina.framework.entity.util.ClasspathScanner,ClasspathScanner,staticFields: [visitors :: List],,
cc.alcina.framework.entity.util.CollectionCreatorsJvm$ConcurrentMapCreatorJvm,CollectionCreatorsJvm.ConcurrentMapCreatorJvm,registrySingleton: true,,
cc.alcina.framework.entity.util.CollectionCreatorsJvm$HashMapCreatorJvm,CollectionCreatorsJvm.HashMapCreatorJvm,registrySingleton: true,,
cc.alcina.framework.entity.util.CollectionCreatorsJvm$HashSetCreatorJvm,CollectionCreatorsJvm.HashSetCreatorJvm,registrySingleton: true,,
cc.alcina.framework.entity.util.CollectionCreatorsJvm$LinkedHashMapCreatorJvm,CollectionCreatorsJvm.LinkedHashMapCreatorJvm,registrySingleton: true,,
cc.alcina.framework.entity.util.CollectionCreatorsJvm$WeakMapCreatorJvm,CollectionCreatorsJvm.WeakMapCreatorJvm,registrySingleton: true,,
cc.alcina.framework.entity.util.JacksonJsonObjectSerializer,JacksonJsonObjectSerializer,"staticFields: [usePool :: boolean, objectMappersPool :: CachingMap]",,
cc.alcina.framework.entity.util.ThreadlocalLooseContextProvider,ThreadlocalLooseContextProvider,"staticFields: [threadLocalInstance :: ThreadLocal, debugStackEntry :: boolean]",,
cc.alcina.framework.gwt.client.Client,Client,staticFields: [contextProvider :: ContextProvider],,
cc.alcina.framework.gwt.client.dirndl.cmp.command.KeyBinding$Support,KeyBinding.Support,staticFields: [classContexts :: Map],,
cc.alcina.framework.gwt.client.dirndl.event.InferredDomEvents$EventRelativeBinding,InferredDomEvents.EventRelativeBinding,staticFields: [mobile :: boolean],,
cc.alcina.framework.gwt.client.dirndl.event.ModelEvents$TopLevelMissedEvent,ModelEvents.TopLevelMissedEvent,staticFields: [topicNotHandled :: Topic],,
cc.alcina.framework.gwt.client.dirndl.layout.ContextResolver$Default,ContextResolver.Default,registrySingleton: true,,
cc.alcina.framework.gwt.client.dirndl.layout.DirectedLayout,DirectedLayout,staticFields: [logger :: Logger],,
cc.alcina.framework.gwt.client.dirndl.layout.DirectedLayout$ReceivesEmitsEvents,DirectedLayout.ReceivesEmitsEvents,staticFields: [instance :: DirectedLayout.ReceivesEmitsEvents],,
cc.alcina.framework.gwt.client.dirndl.overlay.OverlayPositions,OverlayPositions,registrySingleton: true,,
cc.alcina.framework.gwt.client.place.BasePlaceTokenizer,BasePlaceTokenizer,staticFields: [pathQuerystring :: boolean],,
cc.alcina.framework.gwt.client.place.RegistryHistoryMapper,RegistryHistoryMapper,registrySingleton: true,,
cc.alcina.framework.gwt.client.util.DomUtils,DomUtils,"staticFields: [containerTagRegex :: String, ignoreableElementIdPrefix :: String, expandoIdProvider :: SequentialIdGenerator, mapSupplier :: Supplier, blockResolver :: DomUtils.DomUtilsBlockResolver, debugNode :: Node]",,
com.google.gwt.core.client.GWT,GWT,staticFields: [uncaughtExceptionHandler :: GWT.UncaughtExceptionHandler],UNUSED_MT,GWT event loop not used
com.google.gwt.core.client.Scheduler,Scheduler,"staticFields: [INSTANCE :: Scheduler, supplier :: Supplier]",CORRECT_STATIC,Correct (SchedulerFrame) impl used
com.google.gwt.core.shared.GWT,GWT,staticFields: [sGWTBridge :: GWTBridge],CORRECT_STATIC,Correctly routes as a static
com.google.gwt.dom.client.Document,Document,staticFields: [contextProvider :: ContextProvider],CONTEXT_PROVIDER,
com.google.gwt.dom.client.DocumentJso,DocumentJso,staticFields: [doc :: DocumentJso],JSO,
com.google.gwt.dom.client.ElementJso,ElementJso,staticFields: [cache :: ElementJso.RemoteCache],JSO,
com.google.gwt.dom.client.ElementLocal,ElementLocal,staticFields: [_idCounter :: IntCounter],CORRECT_STATIC,
com.google.gwt.dom.client.LocalDom,LocalDom,"staticFields: [maxCharsPerTextNode :: int, topicPublishException :: Topic, topicUnableToParse :: Topic, topicReportException :: Topic, contextProvider :: LocalDom.LocalDomContextProvider, collections :: LocalDom.LocalDomCollections, declarativeCssNames :: Map, disableRemoteWrite :: boolean, logParseAndMutationIssues :: boolean, elementCreators :: Map]",TODO,
com.google.gwt.dom.client.NativeEvent,NativeEvent,"staticFields: [lastNativeEventJso :: NativeEventJso, jsoCounter :: int]",TO_FRAME,
com.google.gwt.dom.client.Pathref,Pathref,staticFields: [preRemovalPaths :: Map],CORRECT_STATIC,
com.google.gwt.dom.client.StyleInjector,StyleInjector,"staticFields: [pending :: List, flusher :: Scheduler.ScheduledCommand, needsInjection :: boolean]",TODO,I'd say just make em all directly inject since ldom means no perf improvement
com.google.gwt.event.dom.client.DomEvent,DomEvent,staticFields: [registered :: PrivateMap],CORRECT_STATIC,PrivateMap is MT-OK
com.google.gwt.event.logical.shared.ResizeEvent,ResizeEvent,staticFields: [TYPE :: GwtEvent.Type],CORRECT_STATIC_TYPE_MARKER,
com.google.gwt.event.logical.shared.ValueChangeEvent,ValueChangeEvent,staticFields: [TYPE :: GwtEvent.Type],CORRECT_STATIC_TYPE_MARKER,
com.google.gwt.regexp.shared.RegExp_Jvm,RegExp_Jvm,staticFields: [cachedPatterns :: Map],CORRECT_STATIC,
com.google.gwt.user.client.DOM,DOM,"staticFields: [currentEvent :: Event, sCaptureElem :: Element, eventCurrentTarget :: Element, recentDispatches :: List]",TO_FRAME,
com.google.gwt.user.client.Event,Event,staticFields: [handlers :: HandlerManager],TO_FRAME,
com.google.gwt.user.client.Event$NativePreviewEvent,Event.NativePreviewEvent,"staticFields: [TYPE :: GwtEvent.Type, singleton :: Event.NativePreviewEvent]",TO_FRAME,
com.google.gwt.user.client.History,History,"staticFields: [contextProvider :: ContextProvider, tokenInterceptor :: Function]",CONTEXT_PROVIDER,
com.google.gwt.user.client.Window,Window,"staticFields: [handlers :: Window.WindowHandlers, closeHandlersInitialized :: boolean, scrollHandlersInitialized :: boolean, resizeHandlersInitialized :: boolean, lastResizeWidth :: int, lastResizeHeight :: int]",TO_FRAME,
com.google.gwt.user.client.Window$Location,Window.Location,staticFields: [contextProvider :: ContextProvider],CONTEXT_PROVIDER,
com.google.gwt.user.client.Window$Navigator,Window.Navigator,staticFields: [contextProvider :: ContextProvider],CONTEXT_PROVIDER,
com.google.gwt.user.client.impl.DOMImpl,DOMImpl,staticFields: [eventSystemIsInitialized :: boolean],UNUSED_MT,
com.google.gwt.user.client.ui.UIObject,UIObject,"staticFields: [numberRegex :: JavaScriptObject, debugIdImpl :: UIObject.DebugIdImpl]",UNUSED_MT,
com.google.gwt.user.client.ui.impl.FocusImpl,FocusImpl,"staticFields: [implPanel :: FocusImpl, implWidget :: FocusImpl]",UNUSED_MT,
com.google.gwt.user.client.ui.impl.FocusImplStandard,FocusImplStandard,staticFields: [focusHandler :: JavaScriptObject],UNUSED_MT,
com.google.web.bindery.event.shared.Event$Type,Event.Type,staticFields: [nextHashCode :: int],FIXED,
