<?xml version="1.0" encoding="utf-8"?>
<project name="project-distro-build" basedir="." default="">
	<import file="project-build.xml" />
	<property name="distributable.name" value="${ant.project.name}"/>
	<target name="make-war" description="Create the project WAR" depends="compile">
		<mkdir dir="${project.dist.dir}" />
		<delete file="${project.dist.dir}/${distributable.name}.war" />
		<antcall target="prepare-war">
		</antcall>
		<war destfile="${project.dist.dir}/${distributable.name}.war" manifest="${project.web-inf.dir}/MANIFEST.MF" webxml="${project.web-inf.dir}/web.xml">
			<!--<fileset dir="${project.web-inf.dir}"> <exclude name="WEB-INF/web.xml" /> </fileset> -->
			<!-- dump this too -->
			<!--to change in a sec -->

			<zipfileset dir="${project.gwt.build.dir}" prefix="">
				<include name="**/*" />
			</zipfileset>

			<zipfileset dir="${project.src.dir}" prefix="WEB-INF/classes">
				<patternset refid="project.war.resource.exports" />
			</zipfileset>
			<zipfileset dir="${project.client.src.dir}" prefix="WEB-INF/classes">
				<patternset refid="project.war.resource.client-src.exports" />
			</zipfileset>
			<lib dir="${project.war.lib.dir}">
				<patternset refid="project.war.libs" />
			</lib>
			<lib refid="project.war.dependencies" />

			<lib refid="alcina.war.exports" />
			<lib refid="alcina.war.dependencies" />
			<classes dir="${project.build.dir}">
				<include name="**/*.class" />
				<patternset refid="project.jar.filter.exclude" />
			</classes>
		</war>
	</target>

	<target name="make-ear" description="Create the project EAR" depends="make-war">
		<delete file="${project.dist.dir}/${distributable.name}.ear" />
		<ear destfile="${project.dist.dir}/${distributable.name}.ear" appxml="${project.ear-inf.dir}/application.xml">
			<fileset dir="dist">
				<include name="**/*.war" />
			</fileset>
			<fileset refid="project.ear.entity-lib" />
			<metainf dir="${project.ear-inf.dir}/META-INF">
			</metainf>
			<zipfileset prefix="${j2ee-lib.dir}" refid="project.ear.libs.1" />
			<zipfileset prefix="${j2ee-lib.dir}" refid="project.ear.libs.2" />
			<zipfileset prefix="${j2ee-lib.dir}" refid="project.ear.libs.3" />
			<zipfileset prefix="${j2ee-lib.dir}" refid="alcina.ear.exports" />
			<zipfileset prefix="${j2ee-lib.dir}" refid="alcina.ear.dependencies" />
		</ear>
	</target>
	<target name="deploy" description="Deploy the ear to the j2ee server" depends="make-ear">
		<copy todir="${deploy.j2ee-server.deploy.dir}" file="${project.dist.dir}/${distributable.name}.ear">
		</copy>
	</target>
	<target name="deploy-only" description="Deploy the ear to the j2ee server">
		<copy todir="${deploy.j2ee-server.deploy.dir}" file="${project.dist.dir}/${distributable.name}.ear">
		</copy>
	</target>
	<target name="undeploy" description="Undeploy ear from server">
		<delete file="${deploy.j2ee-server.deploy.dir}/${distributable.name}.ear" />
		<delete dir="${deploy.j2ee-server.deploy.dir}/${distributable.name}.ear" />
		<delete file="${j2ee-server.unear.target}.deployed" />
		<delete dir="${j2ee-server.unear.target}" />
	</target>
	<target name="prepare-war-base">
		<mkdir dir="${project.gwt.build.dir}" />
		<mkdir dir="${project.gwt.client.imgs.2.tgt}" />
		<mkdir dir="${project.gwt.client.imgs.1.tgt}" />
		<copy todir="${project.gwt.build.dir}/${project.gwt.module.name}" file="${project.gwt.client.css.1}" />
		<copy todir="${project.gwt.build.dir}/${project.gwt.module.name}" file="${project.gwt.client.css.2}" />
		<copy todir="${project.gwt.build.dir}/${project.gwt.module.name}" file="${project.gwt.client.css.3}" />
		<copy todir="${project.gwt.build.dir}" file="${project.gwt.client.html}" />
		<copy todir="${project.gwt.build.dir}/${project.gwt.module.name}" file="${framework.gwt.client.css.1}" />
		<copy todir="${project.gwt.client.imgs.1.tgt}">
			<fileset dir="${project.gwt.client.imgs.1}">
				<include name="**/*" />
			</fileset>
		</copy>
		<copy todir="${project.gwt.client.imgs.2.tgt}">
			<fileset dir="${project.gwt.client.imgs.2}">
				<include name="**/*" />
			</fileset>
		</copy>
	</target>
	<target name="prepare-war" depends="prepare-war-base">
	</target>
	<target name="run-jvm-serialization-policy-helper" depends="prepare-war">
		<java classname="cc.alcina.framework.servlet.JvmSerializationPolicyBuildHelper" fork="yes" classpath="${framework.servlet.build.dir}">
			<arg value="${project.gwt.build.dir}" />
			<arg value="${project.gwt.module.name}" />
		</java>
	</target>
	<target name="hot-deploy" description="Dev :: copy changed server files, no WAR restart" depends="build-dependencies,compile">
		<!--the ear -->
		<mkdir dir="${j2ee-server.unear.target}" />
		<mkdir dir="${j2ee-server.unear.target}${j2ee-lib.dir}" />
		<copy todir="${j2ee-server.unear.target}${j2ee-lib.dir}" preservelastmodified="true">
			<fileset refid="project.ear.libs.1" />
			<fileset refid="project.ear.libs.2" />
			<fileset refid="project.ear.libs.3" />
			<fileset refid="alcina.ear.exports" />
			<fileset refid="alcina.ear.dependencies" />
		</copy>
		<copy todir="${j2ee-server.unear.target}" preservelastmodified="true">
			<fileset refid="project.ear.entity-lib" />

		</copy>
		<copy todir="${j2ee-server.unear.target}/META-INF" preservelastmodified="true">
			<fileset dir="${project.ear-inf.dir}/META-INF">
			</fileset>
			<fileset file="${project.ear-inf.dir}/application.xml">
			</fileset>
		</copy>
		<!--prepare gwt/www -->
		<antcall target="prepare-war">
		</antcall>

		<!--the war -->
		<mkdir dir="${j2ee-server.unwar.target}" />
		<copy todir="${j2ee-server.unwar.target}" preservelastmodified="true">
			<fileset dir="${project.gwt.build.dir}">
				<include name="**/*" />
			</fileset>
		</copy>
		<copy todir="${j2ee-server.unwar.target}/WEB-INF/classes" preservelastmodified="true">
			<fileset dir="${project.src.dir}">
				<patternset refid="project.war.resource.exports" />
			</fileset>
			<fileset dir="${project.client.src.dir}">
				<patternset refid="project.war.resource.client-src.exports" />
			</fileset>
			<fileset dir="${project.build.dir}">
				<include name="**/*.class" />
				<patternset refid="project.jar.filter.exclude" />
			</fileset>
		</copy>
		<copy todir="${j2ee-server.unwar.target}/WEB-INF/lib" preservelastmodified="true">
			<fileset dir="${project.war.lib.dir}">
				<patternset refid="project.war.libs" />
			</fileset>
			<fileset refid="project.war.dependencies" />
			<fileset refid="alcina.war.exports" />
			<fileset refid="alcina.war.dependencies" />
		</copy>
		<copy file="${project.web-inf.dir}/web.xml" todir="${j2ee-server.unwar.target}/WEB-INF" preservelastmodified="true">

		</copy>
		<copy file="${project.web-inf.dir}/MANIFEST.MF" todir="${j2ee-server.unwar.target}/META-INF" preservelastmodified="true">

		</copy>
	</target>
	<target name="hot-deploy-static" description="deploy static client files" depends="prepare-war">
		<mkdir dir="${j2ee-server.unwar.target}" />
		<copy todir="${j2ee-server.unwar.target}" preservelastmodified="true">
			<fileset dir="${project.gwt.build.dir}">
				<include name="**/*" />
			</fileset>
		</copy>
	</target>
	<target name="hot-deploy-restart" description="Dev :: copy changed server files, then restart WAR" depends="hot-deploy">
		<touch file="${j2ee-server.unear.target}/META-INF/application.xml" />
		<touch file="${j2ee-server.unear.target}/../${j2ee-server.unear.name}.dodeploy" />
	</target>

	<!-- needed so gwt can see the compiled annotations, if any, from client source -->
	<target name="compile-client" depends="compile">
		<property name="project.compile-client.dirs" value="${project.client.src.dir}" />

		<mkdir dir="${project.client.bin.dir}" />
		<javac includeantruntime="false" debug="on" srcdir="${project.compile-client.dirs}" destdir="${project.client.bin.dir}">
			<classpath>
				<path refid="project.classpath" />

				<!-- because of being fancy with entity layer remote interfaces, make sure we can see 'em -->
				<pathelement path="${project.build.dir}" />
				<fileset dir="${project.client.lib.dir}">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</javac>
	</target>
	<target name="compile-gwt" description="Compile the GWT app" depends="compile-client,compile-gwt-nodeps" />
	<target name="compile-gwt-nodeps" description="Compile the GWT app (no dependencies)" depends="">
		<property name="project.gwt.compile.jvmarg1" value="-Dblank" />
		<property name="project.gwt.compile.jvmarg2" value="-Dblank" />
		<property name="project.gwt.compile.jvmarg3" value="-Dblank" />
		<java failonerror="true" fork="true" classname="com.google.gwt.dev.Compiler">
			<classpath>
				<pathelement path="${project.gwt.classpath.src}" />
				<pathelement path="${project.gwt.classpath.bin}" />
				<pathelement path="${framework.gwt.classpath.src}" />
				<pathelement path="${project.gwt.classpath.lib}" />
				<pathelement path="${framework.gwt.classpath.bin}" />
				<pathelement path="${framework.gwt.classpath.lib}" />
				<pathelement location="${gwt.sdk.dir}/gwt-dev.jar" />
			</classpath>
			<jvmarg value="-Xmx${framework.gwt.jvm.maxHeapSizeMb}M" />
			<jvmarg value="-Xss2M" />
			<jvmarg value="-Dgwt.usearchives=false" />

			<jvmarg value="${project.gwt.compile.jvmarg1}" />
			<jvmarg value="${project.gwt.compile.jvmarg2}" />
			<jvmarg value="${project.gwt.compile.jvmarg3}" />
			<arg line="-style ${gwt.codestyle}" />
			<arg value="-sourceLevel" />
			<arg value="1.8" />


			<arg line="${project.gwt.compile.flags}" />
			<arg value="${project.gwt.module.name}" />
		</java>
		<!--gwt, for reasons of its own, has the timestamp of this file olllldddd-->
		<touch file="${project.gwt.build.dir}/${project.gwt.module.name}/${project.gwt.module.name}.nocache.js">
		</touch>

	</target>
	<target name="devmode" description="Run development mode" depends="compile,compile-client">
		<java failonerror="true" fork="true" classname="com.google.gwt.dev.DevMode">
			<classpath>
				<pathelement location="src" />
				<path refid="project.gwt.classpath" />
			</classpath>
			<jvmarg value="-Xmx600M" />
			<arg value="-startupUrl" />
			<arg value="${project.gwt.dev.startup.url}" />
			<!--<arg line="-logLevel SPAM" /> -->
			<arg value="${project.gwt.module.name}" />
		</java>
	</target>
	<target name="deployAndGwt" description="JARs the Task" depends="compile,compile-gwt,make-ear">
		<copy todir="${deploy.j2ee-server.deploy.dir}" file="${project.dist.dir}/${distributable.name}.ear">
		</copy>
	</target>
	<target name="hot-deploy-and-gwt-and-restart" description="dev :: compile GWT js, then hot-deploy and restart WAR" depends="compile-gwt,hot-deploy-restart">
	</target>
	<target name="hot-deploy-and-gwt-no-restart" description="dev :: compile GWT js, then hot-deploy without WAR restart" depends="compile-gwt,hot-deploy">
	</target>
</project>